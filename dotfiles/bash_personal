# -*- sh -*-  Personal bash settings
# Put this at the end of your .bashrc or .bash_profile file
# # Source personal definitions
# if [ -f ~/.bash_personal ]; then
#         . ~/.bash_personal
# fi

############################################################################
# system specific settings
export EDITOR=vim
if [[ $UNAME != "Darwin" ]]; then  # not Mac
    export GUI_EDITOR=gvim
    export VMAIL_VIM=vim
else # is Mac
    #export DYLD_LIBRARY_PATaH=$LD_LIBRARY_PATH
    #export MACOSX_DEPLOYMENT_TARGET=10.6
    export GUI_EDITOR=mvim
    export VMAIL_VIM=mvim
fi
# Pager should be defined for mercurial
export PAGER=less
# Less needs to interpret 'raw' output apparently.  Otherwise ipython displays
# the strings mangled with ESCs
export LESS=-R

# some more ls aliases
alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# update for ubuntu
alias apt-up='sudo apt-get update;sudo apt-get -y --force-yes dselect-upgrade'

# for virtualenvs
alias cdve='pushd ${VIRTUAL_ENV}'

# remote gvimming
alias gvr='$GUI_EDITOR --remote-silent'

# My own pip
alias mypipi='pip install --install-option="--prefix=$HOME/usr/local"'

# My own local install from source
alias mypsi='python setup.py install --prefix=$HOME/usr/local'

# Build local wheels
alias mywhy='pip wheel --wheel-dir=$HOME/wheelhouse'

# Move my pip config out of the way
alias unpip='mv $HOME/.pip/pip.conf $HOME/.pip/pip.conf.bak'
alias depip=unpip
alias repip='mv $HOME/.pip/pip.conf.bak $HOME/.pip/pip.conf'

# Move my nose config out of the way
alias unnose='mv $HOME/.noserc $HOME/.noserc.bak'
alias denose=unnose
alias renose='mv $HOME/.noserc.bak $HOME/.noserc'

# Delete, make a temporary virtualenv
alias testve='rmvirtualenv test; mkvirtualenv test'
alias test3ve='rmvirtualenv test3; mkvirtualenv --python=`which python3.4` test3'

# Remove .orig files
alias rmorig='find . -name "*.orig" -exec rm {} \;'

# copy files to scipy_installers directory
# Username has to be same as login username, or set in ssh config
function cp_spi {
    scp $@ nipy.bic.berkeley.edu:/home/scipy_installers
}

# pgrep, pkill if they are not available
if [[ $UNAME == "Darwin" ]]; then  # OSX
    if hash pgrep 2>/dev/null; then
        function pgrep() {
            ps aux | grep $1 | grep -v grep
        }
    fi
    if hash pkill 2>/dev/null; then
        function pkill() {
            local pid
            pid=$(ps ax | grep $1 | grep -v grep | awk '{ print $1 }')
            kill -9 $pid
            echo -n "Killed $1 (process $pid)"
        }
    fi
fi
############################################################################
#
# Load basic bash utilities (handy functions and constants)
#
. $HOME/.bash_utils

############################################################################
#
# Configure paths, using the path generation functions in .bash_utils
#
# These are the prefixes I typically use as --prefix options for installation
# of packages.  There's a method to the madness of having several of them, and
# in this order.  The ones at the top end up first in the generated path specs,
# so they take precedence.
pfx="$pfx $HOME/tmp/junk"  # quick and dirty testing
pfx="$pfx $HOME/tmp/local"  # temporary, stable testing
pfx="$pfx $HOME/usr"  # codes *I* have written
pfx="$pfx $HOME/usr/opt"  # I don't sync this across computers
pfx="$pfx $HOME/usr/local"  # default prefix for third-party installs
pfx="$pfx /local"  # used in some machines I work on
pfx="$pfx /opt"  # vendor directory for commercial stuff

# Initialize $PATH with sbin locations so I can find system tools
export PATH=/usr/local/sbin:/usr/sbin:/sbin:$PATH

# Now, set all common paths based on the prefix list just built.  The
# export_paths function ensures that all commonly needed paths get correctly
# set and exported to the environment.
export_paths "$pfx"

# Make Python version specific ones, so it's easy to switch with a simple alias
PYTHONPATH25=`mk_pythonpath "$pfx" 2.5`
PYTHONPATH26=`mk_pythonpath "$pfx" 2.6`
PYTHONPATH27=`mk_pythonpath "$pfx" 2.7`
PYTHONPATH33=`mk_pythonpath "$pfx" 3.3`

# Add the standard easy_install --user bin path
export PATH=$PATH:$HOME/.local/bin

# Search paths for LaTeX (Dont' forget the final colons.  The null entry `::'
# denotes `default system directories' -- try finding that in the
# documentation.)  Note that these *must* go under ~/texmf, because that
# particular path is hardcoded in LaTeX and is not overridable by the user.
# While one could keep ~/texmf for default package installs and use other
# locations for {tex/bib/bst}inputs, I prefer to centralize all Tex stuff in
# one place.  Since I can't do it in ~/usr/tex, then I'll just keep everything
# TeX related in ~/texmf
export TEXINPUTS=.:$HOME/texmf/texinputs::
export BIBINPUTS=.:$HOME/texmf/bibinputs::
export BSTINPUTS=.:$HOME/texmf/bstinputs::

############################################################################

export MATLABPATH=$HOME/matlab:$HOME/matlab/m2html

# default installation location variable for convenience
export IPREFIX=$HOME/usr/local

# git completion
. $HOME/.git-completion
PS1='[\u@\h ${PWD/$HOME/~}$(__git_ps1 " (%s)")]\$ '

# install virtualenvwrapper functions if available
export WORKON_HOME=$HOME/.virtualenvs
# Prefer lazy version
venv_wrap=`which virtualenvwrapper_lazy.sh`
if [ -f "$venv_wrap" ]; then
    source $venv_wrap
    alias lve='virtualenvwrapper_load'
else
    venv_wrap=`which virtualenvwrapper.sh`
    if [ -f "$venv_wrap" ]; then
        source $venv_wrap
        alias lve='echo "Already loaded"'
    fi
fi

# Python.org Python for OSX
export POPY=/Library/Frameworks/Python.framework/Versions

# pushd to directory for python package
function pushdp {
   pushd `python -c "import os; import $1; print(os.path.dirname($1.__file__))"`
}

# vi bash command line editing
# http://www.jukie.net/bart/blog/20040326082602
set -o vi
set editing-mode vi
set keymap vi
bind -m vi-insert "\C-p":previous-history
bind -m vi-insert "\C-n":next-history
bind -m vi-insert "\C-a":beginning-of-line
bind -m vi-insert "\C-e":end-of-line
bind -m vi-insert "\C-k":kill-line

# gnome keyring for - say - xfce4
# Needs to go in .bashrc or .bash_profile
# case "$-" in
#    *i*)
#         # Interactive prompt
#         # Activate gui popup for ssh passphrases
#         eval `gnome-keyring-daemon -s`
# esac

# Bash completion for wheel files and egg files.
complete -f -X '!*.@(whl|egg|zip)' unzip zipinfo
