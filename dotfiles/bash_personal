# -*- sh -*-  Personal bash settings
# Put this at the end of your .bashrc or .bash_profile file
# # Source personal definitions
# if [ -f ~/.bash_personal ]; then
#         . ~/.bash_personal
# fi

############################################################################
# system specific settings
UNAME=`uname`
if [ "$UNAME" == "Linux" ]; then
    . ~/.bash_linux
elif [[ "$UNAME" == "Darwin" ]]; then
    . ~/.bash_osx
fi

# Default Python, pip executables
PYTHON_EXE=${PYTHON_EXE:-python}
PIP_EXE=${PIP_EXE:-pip}

# Pager should be defined for mercurial
export PAGER=less
# Less needs to interpret 'raw' output apparently.  Otherwise ipython displays
# the strings mangled with ESCs
export LESS=-R

# some more ls aliases
alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# for virtualenvs
alias cdve='pushd ${VIRTUAL_ENV}'

# remote gvimming
alias gvr='$GUI_EDITOR --remote-silent'

# Build local wheels
alias mywhy='$PIP_EXE wheel --wheel-dir=$HOME/wheelhouse'

# Pip user install
alias pipu="$PIP_EXE install --user"

# Show numpy version
alias npv="$PYTHON_EXE -c 'import numpy; print(numpy.__version__)'"

# Move my pip config out of the way
alias unpip='mv $HOME/.pip/pip.conf $HOME/.pip/pip.conf.bak'
alias depip=unpip
alias repip='mv $HOME/.pip/pip.conf.bak $HOME/.pip/pip.conf'

# Move my nose config out of the way
alias unnose='mv $HOME/.noserc $HOME/.noserc.bak'
alias denose=unnose
alias renose='mv $HOME/.noserc.bak $HOME/.noserc'

# Delete, make a temporary virtualenv
alias testve='rmvirtualenv test; mkvirtualenv --python=`which python2.7` test'
alias test3ve='rmvirtualenv test3; mkvirtualenv --python=`which python3.5` test3'

# Remove .orig files
alias rmorig='find . -name "*.orig" -exec rm {} \;'

# copy files to scipy_installers directory
# Username has to be same as login username, or set in ssh config
function cp_spi {
    scp $@ nipy.bic.berkeley.edu:/home/scipy_installers
}

# Add usr bins to PATH
PATH=$HOME/usr/bin:$HOME/usr/local/sbin:$PATH

# Initialize $PATH with sbin locations so I can find system tools
PATH=/usr/local/sbin:/usr/sbin:/sbin:$PATH


# Add the standard --user executable path
# Only expecting this to work on Unices (maybe including Cygwin)
export PY_USER_BIN=$($PYTHON_EXE -c 'import site; print(site.USER_BASE + "/bin")')
PATH=$PY_USER_BIN:$PATH

# Add standard --user-install gem path
[ gem >& /dev/null ] && {
    gem_user_path=`gem environment paths | awk -F ":" '{print $1}'`
    if [ -n "$gem_user_path" ]; then
        PATH=${gem_user_path}/bin:$PATH
    fi
    }

# Search paths for LaTeX (Dont' forget the final colons.  The null entry `::'
# denotes `default system directories' -- try finding that in the
# documentation.)  Note that these *must* go under ~/texmf, because that
# particular path is hardcoded in LaTeX and is not overridable by the user.
# While one could keep ~/texmf for default package installs and use other
# locations for {tex/bib/bst}inputs, I prefer to centralize all Tex stuff in
# one place.  Since I can't do it in ~/usr/tex, then I'll just keep everything
# TeX related in ~/texmf
export TEXINPUTS=.:$HOME/texmf/texinputs::
export BIBINPUTS=.:$HOME/texmf/bibinputs::
export BSTINPUTS=.:$HOME/texmf/bstinputs::

############################################################################

export MATLABPATH=$HOME/matlab:$HOME/matlab/m2html

# git completion
. $HOME/.git-completion
PS1='[\u@\h ${PWD/$HOME/~}$(__git_ps1 " (%s)")]\$ '

# install virtualenvwrapper functions if available
export WORKON_HOME=$HOME/.virtualenvs
# Prefer lazy version
venv_wrap=`which virtualenvwrapper_lazy.sh`
if [ -f "$venv_wrap" ]; then
    source $venv_wrap
    alias lve='virtualenvwrapper_load'
else
    venv_wrap=`which virtualenvwrapper.sh`
    if [ -f "$venv_wrap" ]; then
        source $venv_wrap
        alias lve='echo "Already loaded"'
    fi
fi

# pushd to directory for python package
function pushdp {
   pushd `$PYTHON_EXE -c "import os; import $1; print(os.path.dirname($1.__file__))"`
}

# vi bash command line editing
# http://www.jukie.net/bart/blog/20040326082602
set -o vi
set editing-mode vi
set keymap vi
bind -m vi-insert "\C-p":previous-history
bind -m vi-insert "\C-n":next-history
bind -m vi-insert "\C-a":beginning-of-line
bind -m vi-insert "\C-e":end-of-line
bind -m vi-insert "\C-k":kill-line

# Always export PATH
export PATH

# local::lib setup
# See: http://search.cpan.org/~haarg/local-lib-2.000019/lib/local/lib.pm
# Install by downloading and unpacking archive from that link and
#     perl Makefile.PL --bootstrap
#
# Use with: e.g.:
#   perl -MCPAN -Mlocal::lib -e 'CPAN::install(Math::Matrix)'
perl_local_lib="perl -I$HOME/perl5/lib/perl5 -Mlocal::lib"
"$perl_local_lib" >& /dev/null && {
    eval "$($perl_local_lib)"
    }
